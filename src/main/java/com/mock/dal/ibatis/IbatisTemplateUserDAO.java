/*
 * Alipay.com Inc.
 * Copyright (c) 2004 - 2010 All Rights Reserved.
 * Powered By [rapid-generator]
 */

package com.mock.dal.ibatis;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.mock.dal.daointerface.TemplateUserDAO;
import com.mock.dal.dataobject.TemplateUserDO;

/**
 * TemplateUserDAO
 * database table: anymock_template_user
 * database table comments: TemplateUser
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/dalgen</tt>
 * @author badqiu(zhongxuan)
 * 
 */
public class IbatisTemplateUserDAO extends SqlMapClientDaoSupport implements TemplateUserDAO {

    /**
     * 
     * sql: 
     * <pre>select         id,         innerid,         system_innerid,         bind_innerid,         matchstr,         isdefault,         transcoderule,         template_name,         count,         username,         record_log,           gmt_create,           gmt_modified          from         anymock_template_user          order by         count</pre>
     */
    @SuppressWarnings("unchecked")
    public List<TemplateUserDO> loadAll() throws DataAccessException {
        return getSqlMapClientTemplate().queryForList("anymock.TemplateUser.loadAll", null);
    }

    /**
     * 
     * sql: 
     * <pre>select         innerid          from         anymock_template_user          where         isdefault="TRUE"          and system_innerid = ?</pre>
     */
    public String selectByDefault(String systemInnerid) throws DataAccessException {
        return (String) getSqlMapClientTemplate().queryForObject(
            "anymock.TemplateUser.selectByDefault", systemInnerid);
    }

    /**
     * 
     * sql: 
     * <pre>select         id,         innerid,         system_innerid,         bind_innerid,         matchstr,         isdefault,         transcoderule,         template_name,         count,         username,         record_log,           gmt_create,           gmt_modified          from         anymock_template_user          where         innerid=?</pre>
     */
    public TemplateUserDO selectByInnerId(String innerid) throws DataAccessException {
        return (TemplateUserDO) getSqlMapClientTemplate().queryForObject(
            "anymock.TemplateUser.selectByInnerId", innerid);
    }

    /**
     * 
     * sql: 
     * <pre>select         id,         innerid,         system_innerid,         bind_innerid,         matchstr,         isdefault,         transcoderule,         template_name,         count,         username,         record_log,           gmt_create,           gmt_modified          from         anymock_template_user          where         system_innerid = ?</pre>
     */
    @SuppressWarnings("unchecked")
    public List<TemplateUserDO> selectBySysId(String systemInnerid) throws DataAccessException {
        return getSqlMapClientTemplate().queryForList("anymock.TemplateUser.selectBySysId",
            systemInnerid);
    }

    /**
     * 
     * sql: 
     * <pre>select         id,         innerid,         system_innerid,         bind_innerid,         matchstr,         isdefault,         transcoderule,         template_name,         count,         username,         record_log,           gmt_create,           gmt_modified          from         anymock_template_user          where         username = ?</pre>
     */
    @SuppressWarnings("unchecked")
    public List<TemplateUserDO> selectByUser(String username) throws DataAccessException {
        return getSqlMapClientTemplate()
            .queryForList("anymock.TemplateUser.selectByUser", username);
    }

    /**
     * 
     * sql: 
     * <pre>insert      into         anymock_template_user         (      innerid,      system_innerid,      bind_innerid,      matchstr,      isdefault,      transcoderule,      template_name,      username,      record_log,           gmt_create,           gmt_modified     )      values         (?,?,?,?,?,?,?,?,?,sysdate(),sysdate())</pre>
     */
    public long insert(TemplateUserDO templateUser) throws DataAccessException {
        if (templateUser == null) {
            throw new IllegalArgumentException("Can't insert a null data object into db.");
        }
        getSqlMapClientTemplate().insert("anymock.TemplateUser.insert", templateUser);
        return templateUser.getId();
    }

    /**
     * 
     * sql: 
     * <pre>select         count          from         anymock_template_user          where         innerid=?</pre>
     */
    public int selectCount(String innerid) throws DataAccessException {
        Number returnObject = (Number) getSqlMapClientTemplate().queryForObject(
            "anymock.TemplateUser.selectCount", innerid);
        if (returnObject == null) {
            return 0;
        } else {
            return returnObject.intValue();
        }
    }

    /**
     * 
     * sql: 
     * <pre>update         anymock_template_user      set         count = count+1,      gmt_modified =sysdate()          where         innerid =?</pre>
     */
    public int updateCount(String innerid) throws DataAccessException {
        return getSqlMapClientTemplate().update("anymock.TemplateUser.updateCount", innerid);
    }

    /**
     * 
     * sql: 
     * <pre>update         anymock_template_user      set         matchstr =?,      gmt_modified =sysdate()          where         innerid =?</pre>
     */
    public int updateMatchstr(String matchstr, String innerid) throws DataAccessException {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("matchstr", matchstr);
        param.put("innerid", innerid);
        return getSqlMapClientTemplate().update("anymock.TemplateUser.updateMatchstr", param);
    }

    /**
     * 
     * sql: 
     * <pre>update         anymock_template_user      set         template_name =?,      gmt_modified =sysdate()          where         innerid =?</pre>
     */
    public int updateTemplateName(String templateName, String innerid) throws DataAccessException {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("templateName", templateName);
        param.put("innerid", innerid);
        return getSqlMapClientTemplate().update("anymock.TemplateUser.updateTemplateName", param);
    }

    /**
     * 
     * sql: 
     * <pre>update         anymock_template_user      set         isdefault =?,      gmt_modified =sysdate()          where         innerid =?</pre>
     */
    public int updateDefault(String isdefault, String innerid) throws DataAccessException {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("isdefault", isdefault);
        param.put("innerid", innerid);
        return getSqlMapClientTemplate().update("anymock.TemplateUser.updateDefault", param);
    }

    /**
     * 
     * sql: 
     * <pre>update         anymock_template_user      set         bind_innerid =?,      gmt_modified =sysdate()          where         innerid =?</pre>
     */
    public int updatetBind(String bindInnerid, String innerid) throws DataAccessException {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("bindInnerid", bindInnerid);
        param.put("innerid", innerid);
        return getSqlMapClientTemplate().update("anymock.TemplateUser.updatetBind", param);
    }

    /**
     * 
     * sql: 
     * <pre>delete      from         anymock_template_user          where         innerid = ?</pre>
     */
    public int deleteByInnerid(String innerid) throws DataAccessException {
        return getSqlMapClientTemplate().delete("anymock.TemplateUser.deleteByInnerid", innerid);
    }

}
