/*
 * Alipay.com Inc.
 * Copyright (c) 2004 - 2010 All Rights Reserved.
 * Powered By [rapid-generator]
 */

package com.mock.dal.ibatis;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.mock.dal.daointerface.LableDAO;
import com.mock.dal.dataobject.LableDO;

/**
 * LableDAO
 * database table: anymock_lable
 * database table comments: Lable
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/dalgen</tt>
 * @author badqiu(zhongxuan)
 * 
 */
public class IbatisLableDAO extends SqlMapClientDaoSupport implements LableDAO {

    /**
     * 
     * sql: 
     * <pre>insert      into         anymock_lable         (        communication_id,        lable_name)          values         (?,?)</pre>
     */
    public java.lang.String insert(LableDO lable) throws DataAccessException {
        if (lable == null) {
            throw new IllegalArgumentException("Can't insert a null data object into db.");
        }
        getSqlMapClientTemplate().insert("anymock.Lable.insert", lable);
        return lable.getCommunicationId();
    }

    /**
     * 
     * sql: 
     * <pre>select         communication_id,         lable_name          from         anymock_lable</pre>
     */
    @SuppressWarnings("unchecked")
    public List<LableDO> loadAll() throws DataAccessException {
        return getSqlMapClientTemplate().queryForList("anymock.Lable.loadAll", null);
    }

    /**
     * 
     * sql: 
     * <pre>update         anymock_lable      set         lable_name =?          where         communication_id =?</pre>
     */
    public int updateLable(String lableName, String communicationId) throws DataAccessException {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("lableName", lableName);
        param.put("communicationId", communicationId);
        return getSqlMapClientTemplate().update("anymock.Lable.updateLable", param);
    }

    /**
     * 
     * sql: 
     * <pre>delete      from         anymock_lable          where         communication_id = ?</pre>
     */
    public int deleteByCommuId(String communicationId) throws DataAccessException {
        return getSqlMapClientTemplate().delete("anymock.Lable.deleteByCommuId", communicationId);
    }

}
